------------------------------------------------------------
1. #include <iostream>
    cout, cin来自该头文件

------------------------------------------------------------
2. using namespace std;
    This line tells the compiler to use a group of functions that are part of the standard library (std)
    
    cin.get() //Including that line gives you time to see the program run
    cin >> // accept input. The function you use is known as cin, and is followed by the extraction operator >>.
    cin.ignore() is another function that reads and discards a character
------------------------------------------------------------
3. this

------------------------------------------------------------
4. google c++ style guide

------------------------------------------------------------
5. c++参考书
    《c++标准程序》 《Effective c++》 《c++ concurrency in action》 《linux多线程服务端编程》

------------------------------------------------------------
6. 生词
    primer 初级读物； 

------------------------------------------------------------
7. 获得命令执行状态
    unix： echo $?
    windows: echo %ERRORLEVEL%

------------------------------------------------------------
8. 标准输入输出对象
    iostream库
        istream: cin 标准输入
        ostream: cout 标准输出
                 cerr 标准错误
                 clog 用来输出程序运行时的一般信息
                 
------------------------------------------------------------
9. 输出运算符 << & 输入运算符 >>
    9.1 输出运算符 << 
        接收两个运算对象，左侧的对象必须是ostream对象，右侧的运算对象是要打印的值。
    9.2 endl 操纵符，结束当前行，并将与设备关联的缓冲区中的内容刷新到设备中。
    9.3 输入运算符 >> 
        接收一个istream作为左侧运算对象，接收一个对象作为右侧运算对象，从给定的istream读入数据，
        并存入给定对象中。
------------------------------------------------------------
10. 多行注释（界定符注释）
    多行注释最好能显式指出其内部的程序行都属于注释的一部分。可以采用的风格是，注释内的每一行以
    一个星号开头，从而指出整个范围都是多行注释的一部分。如下
    /*
     * 简单主函数
     * 读取两个数，求和
     */
     
     10.1 多行注释不能嵌套，调试程序时最好用单行注释

------------------------------------------------------------
11. 读取数量不定的输入数据
    int sum = 0, value = 0;
    //读取数据直到遇到文件尾，计算所有读入的数值之和
    while (std::cin >> value)
    {
        sum += value;
    }
    注： std::cin >>必须要有非int类型数据输入，或者ctrl + Z，才能结束读取输入，否则将一直读取。
------------------------------------------------------------
12. 操作系统文件结束符
    windows ： ctrl + Z
    unix : ctrl + D
------------------------------------------------------------
13. 头文件的名字和后缀
    习惯上，头文件根据其中定义的类的名字来命名；
    我通常使用.h作为头文件的后缀，但也有一些程序员使用.H,.hpp,.hxx。标准库
    头文件通常不带后缀。

------------------------------------------------------------
14. 语言扩充
    大多数编程语言通过两种方法扩充其基本特征：
    1）自定义数据 2）将有用的功能封装成库函数

------------------------------------------------------------
15. 包含头文件
    标准库头文件：用尖括号（<>）包围文件名
    非标准库头文件：用双引号（""）包围文件名

------------------------------------------------------------
16. 文件重定向
    允许我们将标准输入和标准输出与命名文件关联起来
    对于addItems.exe, addItems <infile >outfile
    从infile中读取记录，结果输出到outfile中

------------------------------------------------------------
17. 类型转换
    17.1 给无符号赋值为超出表示范围的数，如
        unsigned char c = -1; //假设char占8比特，c的值为255
        注：当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示
        数值总数取模后的余数。-1%156=(255-256)%/256=255
    17.2 当我们赋给带符号类型一个超出它表示范围的值时，结果是未定义的。
        signed char c = 256; //假设char占8比特，c的值是未定义的
    17.3 当一个表达式中既有无符号数又有int值时，那个int值 就会转换成无符号数，相当于
        把int直接赋值给无符号变量。
------------------------------------------------------------
18. 八进制，十六进制
    以8开头的整数代表8进制，以0x或0X开头的代表十六进制。

------------------------------------------------------------
19. 字符串
    19.1 编译器在每个字符串的结尾处添加一个空字符（'\0'），因此，字符串字面值的长度要比
    它的内容多1。 

------------------------------------------------------------
20. 指定字面值类型
    L'a' //宽字符型字面值，类型是wchar_t
    u8'hi!' // utf-8字符串字面值
    42ULL // 无符号整型字面值，类型是unsigned long long
    1E-3F //但精度浮点型字面值，类型是float
    3.14L //扩展精度浮点型字面值，类型是long double

    true和false是布尔类型的字面值，如： bool test = false
    nullptr是指针字面值
    
------------------------------------------------------------
21. 列表初始化
    初始化语句：
        int u = 0;
        int u = {0};
        int u{0};
        int u(0);
    注：用花括号初始化叫列表初始化。当用列表初始化且初始值存在丢失风险时，编译器报错。

------------------------------------------------------------
22. 编程规范
    初始化每一个内置类型的变量

------------------------------------------------------------
23. 变量声明和定义
    23.1 如果想声明一个变量而非定义它，就在变量名前添加extern，如
        extern int i; //声明i而非定义i
        然而: int j; // 声明并定义j
    注：变量能且只能被定义一次，但是可以被声明多次。
------------------------------------------------------------
24. 全局变量显式访问
    24.1 ::g_val

------------------------------------------------------------
25. 复合类型（引用&指针）
    25.1 引用
        int ival = 1024;
        int &refVal = ival; // refVal指向val,是val的另一个名字
        int &refVal2;

------------------------------------------------------------
26. 此处插入在家中学习的笔记

------------------------------------------------------------
27. 指针获取对象地址
    int ival = 42;
    int *p = &ival;
    注：因为引用不是对象，没有实际地址，所以不能定义指向引用的指针； 
        指针的类型必须与其指向对象的类型严格匹配。如上述示例中ival和p的类型都是指针。

------------------------------------------------------------
28. 生成空指针
    a. int *p = nullptr;
    b. int *p = 0;
    c. int *p = NULL; // 需要首先include cstdlib

------------------------------------------------------------
29. 引用
    一旦定义了引用，就无法令其再绑定到另外的对象，之后每次使用这个引用都是访问它
    最初绑定的对象。

------------------------------------------------------------
30. void*指针
    30.1 定义
        一种特殊的指针类型，用于存放任意对象的地址。
    30.2 用途
        利用void*指针能做的事儿有限：
        a. 和别的指针比较
        b. 作为函数的输入或输出
        c. 赋给另外一个void*指针

------------------------------------------------------------
31. 指向指针的引用
    int i = 42;
    int *p;
    int *&r = p;
    注：要理解r的类型到底是什么，最简单的办法是从右往左阅读r的定义。离变量名最近的
    符号（此例中是&）对变量有最直接的影响，因此r是一个引用。声明符的其余部分用以确定
    r引用的类型是什么，此例中的符号*说明r引用的是一个指针。
    面对一条比较复杂的指针或引用的声明语句时，从右向左阅读有助于弄清楚真实含义。
    
------------------------------------------------------------
32. const限定符
    31.1 
        const int i = get_size(); // 正确，运行时初始化
        const int j = 42; // 正确，编译时初始化
        const int k; // 错误，k是一个未经初始化的常量
    31.2 作用范围
        默认状态下，const对象仅在文件内部有效，如果要在文件间共享，对于const变量，无论
        是声明还是定义，都添加extern关键字。如下：
        // file.c
        extern const int bufsize = fcn();
        // file.h
        extern const int bufsize;
        
------------------------------------------------------------
33. 类型别名
    33.1 typedef Saled_item SI
    33.2 using SI=Saled_item;

------------------------------------------------------------
34. auto
    auto让编译器通过初始值来推算变量的类型，显然，auto定义的变量必须要初始化。

------------------------------------------------------------
35. decltype类型指示符
    分析表达式并返回它的类型，如decltype(f()) sum=x; // sum的类型就是函数f的返回类型

------------------------------------------------------------
36. struct类
    在c++中，可以用struct定义类

------------------------------------------------------------
37. 命名空间的using声明
    37.1 using namespace::name; 如
        using std::cin;
    37.2 头文件
        位于头文件的代码一般来说不应该使用using声明。因为头文件会拷贝到所有引用
        它的文件中去，容易造成名字冲突。
------------------------------------------------------------
38. 定义和初始化string对象
    #include <string>
    using std::string;
    38.1 string s1; // 默认初始化，s1是一个空串
        string s2(s1); // s2是s1的副本
        string s2=s1; //  等价于string s2(s1),s2是s1的副本
        string s3("value"); // s3是字面值"value"的副本，除了字面值最后的那个空字符外
        string s3 = "value"; // 等价于string s3("value")， s3是字面值"value"的副本
        string s4(n,'c'); // 把s4初始化为由n个连续字符c祖冲的串
    38.2 string的操作

------------------------------------------------------------
39. 使用getline读取一整行
    如，getline(cin,line)，直到遇到换行符

------------------------------------------------------------
40. string的empty()和size()函数
    size()函数的返回值是string::size_type，无符号整型数，
    如果一条表达式中已经有了size函数就不要再使用int了，这样可以避免混用int和unsigned可能
    带来的问题。

------------------------------------------------------------
41. string相加
    相当于两个字符串串接而成。
    41.1 字面值和string相加
        当把string对象和字符字面值及字符串字面值混在一条语句中使用时，必须确保每个加法
        运算符的两侧的运算对象至少有一个是string。
            string s1 = "hello", s2 = "world";
            string s3 = s1 + ',' + s2 + '\n'; // 正确
            string s4 = s1 + ", "; // 正确
            string s5 = "hello" + ", "; // 错误，两个运算对象都不是string
            string s6 = s1 + ", " + "world"; // 正确，s1 + ", "的结果是string
            string s7 = "hello" + ", " + s2; // 错误，"hello" + ", "的结果不是string
        
------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


------------------------------------------------------------


